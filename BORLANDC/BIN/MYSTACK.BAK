#include<iostream.h>
#include<conio.h>

class Stack
{
	int top;
	int size;
	int *ptr;
	static int counter;

	public:

	Stack()
	{
		top = 0 ;
		size = 5 ;
		ptr = new int [size];
		counter++;

	}

	Stack(int s)
	{
		top = 0 ;
		size = s ;
		ptr = new int [size];
		counter++;
	}

	Stack(Stack & s)
	{
		top = s.top;
		size = s.size;
		ptr = new int[size];

		for(int i = 0 ; i < size ; i ++)
		{

			ptr[i] = s.ptr[i];
		}
		counter++;
	}

	~Stack()
	{
		delete[]ptr;
		counter --;
	}

	static int GetCounter()
	{
		return counter;
	}

	void Push( int element )
	{
		if(top == size)
		{

			cout<<"Stack is full";
		}
		else
		{
			ptr[top] = element;
			top++;
		}
	}

	int Pop()
	{
		if(top == 0)
		{

			cout<<"Stack is Empty";
		}
		else
		{
			top--;
			int val = ptr[top];
			return val;
		}
	}

	friend DisplayStack( Stack s)
	{
		for(int i = 0 ; i < s.size ; i++)
		{
			cout<<s.ptr[i];
		}
	}


};

int Stack :: counter = 0;





void main ()
{
	clrscr();
	Stack s1;
	s1.Push(11);
	//cout<<s1.Pop();

	cout<<Stack::GetCounter();
	getch();
}